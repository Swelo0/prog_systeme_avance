----------
 12/11/14
----------
- Finition read_sector/write_sector
- Création système fichier simple

----------
 19/11/14
----------
Fonctionnement sfsadd/del/list

sfsadd(FILE)
	- Extraire infos de FILE
	- Partitionner FILE en n blocs
	- Pour chaque bloc :
		- Trouver dans Bitmap le prochain bloc libre (bit à 0)
		- Changer le bit à 1 et retourner l'index
		- Renseigner l'index dans File Entries
		- Stocker le contenu du bloc dans File Content au même index

sfsdel(FILE)
	- Parcourir itérativement File Entries jusqu'à trouver le fichier correspondant
	- Dans le File Entry, Changer en "0" le premier caractère du nom du fichier
	- Pour chaque bloc du File Entry :
		- Récupérer son index
		- Mettre le bit correspondant dans Bitmap à 0
		
Parcours itératif :
 - Stockage variable globale current_index dans le système de fichier (init à 0 dans le constructeur)
 x.nextFile() :
  - S'il y a une entry qui ne commence pas par "0" :
   - File_Entry[current_index].Name
   (256 bytes = 1/4 bloc par file entry, 16 blocs pour les file entries ==> 64 fichiers possibles)
   - Si current_index < 63
      Incrémentation current_index
   - Sinon
      current_index = 0 (peut-être faire une fonction x.resetIndex() pour être plus flexible) 
     
----------
 26/11/14
----------
 - Débogage construction structure "filesystem"
 - Fonctions sfsadd / sfsdel

----------
 03/12/14
----------
 - Tests et débogage sfsadd/sfsdel
 - Fonction sfslist
 - Ajout de constantes (#define)

----------
 09/12/14
----------
 - Modification Makefile pour inclure l'image fs.img
 - Tests et débogage sfslist

----------
 10/11/14
----------
 - Fonctions iterator / getstats (kernel_/)
	==> Erreur : Need scalar (index = (first_fe_sect) + (position / 2);)
	
-----------------------
Du 11.12.14 au 16.12.14
-----------------------

-Fonction iterator débuggé, à première vue fonctionnelle MAIS
	-l'assignation sur le pointeur *sector ne fonctionne pas, pas possible du coup de charger le bon secteur.
	 Il faut donc poser des valeurs en dur dans le read_sector().
	-donc pas moyen non plus de tester si l'itérateur fonctionne correctement au niveau de l'itération. 
	 (incrémentation de *sectorPos et *position entre autre)
	-Il faut trouver un moyen de renvoyer une valeur correcte dans *stat.size (passer d'un truc stocké sur 16 bits
	 en un truc int standard. Ou alors il faut changer la structure pour que *stat.size soit en int16.
	-la question est: peut-on réellement utiliser des pointeurs dans cette version de C?

-La fonction get_stat() est a priori fonctionnelle (du moins si l'iterator fonctionne)
	 
